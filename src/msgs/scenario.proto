/*
 * Copyright (C) 2022 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "iteration.proto";
import "artifact.proto";

package domain;

option go_package = "gitlab.com/ignitionrobotics/cloudsim/api/domain";

// Scenario groups a set of tests executed by the testing library.
message Scenario
{
  // Name contains the name of the scenario.
  string name = 1;

  // Description contains the description of the test results.
  string description = 2;

  // StartTime is the time point, in UTC epoch time, that this scenario started.
  google.protobuf.Timestamp start_time = 3;

  // Duration contains the duration that it took to run this scenario.
  google.protobuf.Duration duration = 4;

  // IterationCount contains the total number of iterations that ran for this scenario.
  int32 iteration_count = 5;

  // IterationPassCount contains the number of iterations that passed. The count of iterations can be used to
  // determine the number of failed iterations by subtracting it to `iteration_count`.
  int32 iteration_pass_count = 6;

  // Iterations contains each iteration of the tests contained in the scenario.
  repeated Iteration iterations = 7;

  // GroupId is a unique identifier for the simulation instance that produced the test results.
  string group_id = 8;

  // Artifacts are set of links to the artifacts generated by this scenario.
  repeated Artifact artifacts = 9;

  enum Status {
    UNKNOWN = 0;
    PENDING = 1000;
    SCHEDULED = 2000;
    RUNNING = 3000;
    FINISHED = 4000;
  }

  // Status contains the lifecycle state this scenario is in.
  Status status = 10;

  // Error contains an optional error message explaining why the scenario failed.
  // Error is empty if there are no errors with this scenario. It must only be set if Scenario.Status == Finished.
  string error = 11;

  // Passed is true if all the iterations in this scenario passed.
  bool passed = 12;
}
